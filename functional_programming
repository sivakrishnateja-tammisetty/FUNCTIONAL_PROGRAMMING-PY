*FUNCTIONAL PROGRAMMING:
  * Functional programming means  writing programs in different way.
  *Functional programming should be ble to assign  functions to variables.



Eg1:                                                                       

def add(i,j):
    return i+j
a=add
res=a(2,3)
print(res)
 o/p:5

Eg2:
def add(i,j):
    return i+j
def call_add(i,j):
    return add(i,j)
res=call_add(2,3)
print(res)
o/p:5




Eg:
def add(i,j):
    return i+j
def call(i,j):
    return add(i,j)
def pas(i,j,fun):
    return fun(i,j)
res=pas(2,3,call)
print(res)

o/p:5

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


*LAMBDA FUNCTION:
---------------
 *Lambda function is a nameless function(anonymus function).
 *syntax:
         lambda arguments:expression

Eg:
 fun=lambda a:a+2
 res=fun(2)
 print(res) 
o/p:4

Eg:
fun=lambda a,b:a+b
res=fun(2,4)
print(res)
o/p:6

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*FILTER:
 ------

*syntax: filter(function,iterable)


Eg:
 def find_even(a):
    return a%2==0
numbers=[1,2,3,4,5,6,7,8,9]
res_obj=filter(find_even,numbers)
print(res_obj)
res=list(filter(find_even,numbers))
print(res)


o/p:
<filter object at 0X7fa9f4f900d0>
[2,4,6,8]




def find_even(a):
    return a%2==0
numbers=[1,2,3,4,5,6,7,8,9]
res_obj=filter(find_even,numbers)
print(res_obj)
res=set(filter(find_even,numbers))
print(res)


o/p:
<filter object at 0X7fa9f4f900d0>
{2,4,6,8}



*combination of lambda and filter function
 Eg:
 numbers=[1,2,3,4,5,6,7,8,9]
res=set(filter(lambda a:a%2==0,numbers))
print(res)
o/p:{8,2,4,6}





*instead of list,we given range()

Eg:
res=set(filter(lambda a:a%2==0, range(11)))
print(res)

o/p:
{0,2,4,6,8,10}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*MAP:
 ---

*Map is a same as filter ,but functionality should be different.
*syntax ==> map(function,iterable)

Eg:
def squares(a):
    return a*a
numbers=[1,2,3,4]
res=list(map(squares,numbers))
print(res)

o/p:
[1,4,9,16]



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*ITERATOR AND GENERATOR:
 ----------------------

 *ITERATOR :Iterator is an object that contains a countable number of values.

*syntax : iter(iterable)
*Iterator contains 2methods:  __iter__() and __next__()
Eg:
names=["siva","krishna","Teja"]
iteration=iter(names)
print(iteration)         #It prints iteration object
print(iteration.__next__()) #It prints first value
print(next(iteration))      #Its print next value(Another way)

o/p:
<list_iterator object at 0x7f00fc7f7100>
siva
krishna

*GENERATOR : It is something that creates iterator.
 *whenever we want generator, we need to define function.
 *yield :These yield gives the generator.
 *generator gives iterables.

 *DIFFERENCE B/W RETURN AND YIELD?
  *After return statement,other statements will not consider and execute,whereas in yield we can give any number of yield statements.

Eg:

def fun():
    yield 1
    yield 2
    yield 3
values=fun()
print(values)
print(values.__next__())
print(values.__next__())
print(values.__next__())

o/p:
<generator object fun at 0x7f716cfd82e0>
1
2
3



Eg2:
def squares():
    n=1
    while n<=5:
        square=n**2
        yield square
        n=n+1
values=squares()
for i in values:
    print(i)

o/p:
1
4
9
16
25
